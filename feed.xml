<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="https://hebonda.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://hebonda.github.io/" rel="alternate" type="text/html" /><updated>2021-03-17T23:17:42+09:00</updated><id>https://hebonda.github.io/feed.xml</id><title type="html">just HeBonDa</title><subtitle>그냥 해본다</subtitle><entry><title type="html">디스커스(Disqus) 이메일 인증 안될때</title><link href="https://hebonda.github.io/2021/03/17/01_When_Disqus_email_is_not_verified.html" rel="alternate" type="text/html" title="디스커스(Disqus) 이메일 인증 안될때" /><published>2021-03-17T00:00:00+09:00</published><updated>2021-03-17T00:00:00+09:00</updated><id>https://hebonda.github.io/2021/03/17/01_When_Disqus_email_is_not_verified</id><content type="html" xml:base="https://hebonda.github.io/2021/03/17/01_When_Disqus_email_is_not_verified.html">&lt;p&gt;디스커스(Disqus) 회원가입 하면 인증 이메일이 옵니다만&lt;br /&gt;
이메일에 있는 인증 버튼을 눌러도 링크를 통해도 인증이 안되는 경우가 있습니다&lt;/p&gt;

&lt;p&gt;“Disqus Email 인증 ERR_CONNECTION_REFUSED”&lt;/p&gt;

&lt;p&gt;아래 블로그 내용을 보고 해결 했습니다&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://minhyeong-jang.github.io/2021/03/10/disqus-error&quot;&gt;해결방법 블로그&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">디스커스(Disqus) 회원가입 하면 인증 이메일이 옵니다만 이메일에 있는 인증 버튼을 눌러도 링크를 통해도 인증이 안되는 경우가 있습니다</summary></entry><entry><title type="html">C# delegate - 정의 - 콜백메서드 종류와 차이</title><link href="https://hebonda.github.io/2019/11/17/01.html" rel="alternate" type="text/html" title="C# delegate - 정의 - 콜백메서드 종류와 차이" /><published>2019-11-17T00:00:00+09:00</published><updated>2019-11-17T00:00:00+09:00</updated><id>https://hebonda.github.io/2019/11/17/01</id><content type="html" xml:base="https://hebonda.github.io/2019/11/17/01.html">&lt;h1 id=&quot;c-delegate---정의---콜백-메서드-종류와-차이&quot;&gt;C# delegate - 정의 - 콜백 메서드 종류와 차이&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;종류&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;익명 함수&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;인라인 정의&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;비고&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;메서드&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;X&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;X&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;일반적인 함수&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;무명 메서드&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;O&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;O&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;delegate( … ) { … }&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;람다&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;O&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;O&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;( … ) =&amp;gt; { … }&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;메서드&quot;&gt;메서드&lt;/h2&gt;
&lt;p&gt;일반적인 &lt;code class=&quot;highlighter-rouge&quot;&gt;함수&lt;/code&gt;로 &lt;code class=&quot;highlighter-rouge&quot;&gt;콜백메서드&lt;/code&gt;를 만듭니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;콜백메서드&lt;/code&gt;를 Delegate에 할당하여 정의 합니다.&lt;/p&gt;
&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;무명-메서드&quot;&gt;무명 메서드&lt;/h2&gt;
&lt;p&gt;인라인으로 된 &lt;code class=&quot;highlighter-rouge&quot;&gt;무명 메서드&lt;/code&gt;로 &lt;code class=&quot;highlighter-rouge&quot;&gt;콜백메서드&lt;/code&gt;를 만듭니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;콜맥메서드&lt;/code&gt;를 Delegate에 할당하여 정의 합니다.&lt;/p&gt;
&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;람다&quot;&gt;람다&lt;/h2&gt;
&lt;p&gt;인라인으로 된 &lt;code class=&quot;highlighter-rouge&quot;&gt;람다&lt;/code&gt;로 &lt;code class=&quot;highlighter-rouge&quot;&gt;콜맥메서드&lt;/code&gt;를 만듭니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;콜맥메서드&lt;/code&gt;를 Delegate에 할당하여 정의 합니다.&lt;/p&gt;
&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;관련-페이지&quot;&gt;관련 페이지&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;/2019/11/16/01.html&quot;&gt;C# delegate - 선언 - 종류와 차이&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;/2019/11/16/01.html&quot;&gt;C# delegate - 선언 - 종류와 차이&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;키워드&quot;&gt;키워드&lt;/h4&gt;
&lt;p&gt;선언 Declaration 정의 Definition 델리게이트 Delegate 콜백메서드 CallbackMethod 익명함수 Anonymous Funcion 식 람다 Expression Lambda 문 람다 Statement Lambda&lt;/p&gt;</content><author><name></name></author><summary type="html">C# delegate - 정의 - 콜백 메서드 종류와 차이</summary></entry><entry><title type="html">C# delegate - 선언 - 종류와 차이</title><link href="https://hebonda.github.io/2019/11/16/01.html" rel="alternate" type="text/html" title="C# delegate - 선언 - 종류와 차이" /><published>2019-11-16T00:00:00+09:00</published><updated>2019-11-16T00:00:00+09:00</updated><id>https://hebonda.github.io/2019/11/16/01</id><content type="html" xml:base="https://hebonda.github.io/2019/11/16/01.html">&lt;h1 id=&quot;c-delegate---선언---종류와-차이&quot;&gt;C# delegate - 선언 - 종류와 차이&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;종류&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;선언(declaration)&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;리턴 값&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Delegate&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;사용자 선언&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;O&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Func Delegate&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;미리 선언되어 있음&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;O&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Action Delegate&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;미리 선언되어 있음&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;X&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Predicate Delegate&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;미리 선언되어 있음&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;only bool&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;delegate&quot;&gt;Delegate&lt;/h2&gt;
&lt;p&gt;사용자가 직접 선언하여 사용 합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FunctionABC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;func-delegate&quot;&gt;Func Delegate&lt;/h2&gt;
&lt;p&gt;System에 미리 선언되어 있는 Delegate 입니다.&lt;/p&gt;
&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;action-delegate&quot;&gt;Action Delegate&lt;/h2&gt;
&lt;p&gt;System에 미리 선언되어 있는 Delegate 입니다.&lt;br /&gt;
리턴값이 없는 경우 사용합니다.&lt;/p&gt;
&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;predicate-delegate&quot;&gt;Predicate Delegate&lt;/h2&gt;
&lt;p&gt;System에 미리 선언되어 있는 Delegate 입니다.&lt;br /&gt;
매개변수가 1개이고, 리턴 타입이 bool 인 경우 사용합니다.&lt;/p&gt;
&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Predicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;관련-페이지&quot;&gt;관련 페이지&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;/2019/11/17/01.html&quot;&gt;C# delegate - 정의 - 콜백메서드 종류와 차이&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;/2019/11/17/01.html&quot;&gt;C# delegate - 정의 - 콜백메서드 종류와 차이&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;선언 Declaration 정의 Definition 델리게이트 Delegate 콜백메서드 CallbackMethod 익명함수 Anonymous Funcion 식 람다 Expression Lambda 문 람다 Statement Lambda&lt;/p&gt;</content><author><name></name></author><summary type="html">C# delegate - 선언 - 종류와 차이</summary></entry><entry><title type="html">실행력이 약한 내게 하는 이야기</title><link href="https://hebonda.github.io/2019/11/15/01.html" rel="alternate" type="text/html" title="실행력이 약한 내게 하는 이야기" /><published>2019-11-15T00:00:00+09:00</published><updated>2019-11-15T00:00:00+09:00</updated><id>https://hebonda.github.io/2019/11/15/01</id><content type="html" xml:base="https://hebonda.github.io/2019/11/15/01.html">&lt;p&gt;생각하고 실행 하는걸 선호하시나요?&lt;br /&gt;
실행하고 생각 하는걸 선호 하시나요?&lt;/p&gt;

&lt;p&gt;생각하고 움직이면 실행력이 약해지는것 같고요.&lt;br /&gt;
반면, 먼저 실행하고 나중에 생각을 하면 실패 확률이 올라 가는것 같아요.&lt;/p&gt;

&lt;p&gt;만약, &lt;br /&gt;
실패해도 괜찮은 상황이라면… &lt;br /&gt;
일단 먼저 실행 부터 해보고 생각해 봐요. &lt;br /&gt;
비록 실패를 경험하게 되더라도 &lt;br /&gt;
실행하기 전에 생각만 하고 있던 것보다 더 많은 경험을 했기에 더 괜찮은 생각을 얻을수 있을거 같아요.&lt;br /&gt;
이미 실행하고 있기 때문에 관성에 의해 계속 실행 될 확률도 높아 지겠구요.&lt;/p&gt;

&lt;p&gt;현재, 현대 사회는 실패하면 안되는 사회에서 실패해도 괜찮은 사회로 변화하고 있는거 같요. 어쩌면 이미 변했을지도 모르구요.&lt;/p&gt;

&lt;p&gt;어쩌면, 요즘 사회에선 먼저 실행하고 나중에 생각하는것이, 더 좋은 결과를 가져올 확률이 높을 수도 있겠네요.&lt;/p&gt;</content><author><name></name></author><summary type="html">생각하고 실행 하는걸 선호하시나요? 실행하고 생각 하는걸 선호 하시나요?</summary></entry><entry><title type="html">파라미터 아규먼트 차이</title><link href="https://hebonda.github.io/2019/11/15/02.html" rel="alternate" type="text/html" title="파라미터 아규먼트 차이" /><published>2019-11-15T00:00:00+09:00</published><updated>2019-11-15T00:00:00+09:00</updated><id>https://hebonda.github.io/2019/11/15/02</id><content type="html" xml:base="https://hebonda.github.io/2019/11/15/02.html">&lt;h2 id=&quot;parameter&quot;&gt;Parameter&lt;/h2&gt;
&lt;p&gt;매개변수, 함수 입장에서 값을 받을 때 쓰이는 변수&lt;/p&gt;

&lt;h2 id=&quot;argument&quot;&gt;Argument&lt;/h2&gt;
&lt;p&gt;인수 , 전달인자 , 함수에 전달하는 실제 값&lt;/p&gt;</content><author><name></name></author><summary type="html">Parameter 매개변수, 함수 입장에서 값을 받을 때 쓰이는 변수</summary></entry><entry><title type="html">CPU에서 논리적으로 바라보는 메모리 공간은 1차원이다</title><link href="https://hebonda.github.io/2019/11/14/01.html" rel="alternate" type="text/html" title="CPU에서 논리적으로 바라보는 메모리 공간은 1차원이다" /><published>2019-11-14T00:00:00+09:00</published><updated>2019-11-14T00:00:00+09:00</updated><id>https://hebonda.github.io/2019/11/14/01</id><content type="html" xml:base="https://hebonda.github.io/2019/11/14/01.html">&lt;p&gt;CPU에서 논리적으로 바라보는 메모리 공간은 1차원 입니다.&lt;br /&gt;
메모리 하드웨어는 2차원 또는 3차원 구조를 갖는다고 하지만&lt;br /&gt;
CPU 입장에서 메모리 구조는 1차원 입니다.&lt;/p&gt;</content><author><name></name></author><summary type="html">CPU에서 논리적으로 바라보는 메모리 공간은 1차원 입니다. 메모리 하드웨어는 2차원 또는 3차원 구조를 갖는다고 하지만 CPU 입장에서 메모리 구조는 1차원 입니다.</summary></entry><entry><title type="html">메모리 주소공간 하나의 크기는 1Byte</title><link href="https://hebonda.github.io/2019/11/14/02.html" rel="alternate" type="text/html" title="메모리 주소공간 하나의 크기는 1Byte" /><published>2019-11-14T00:00:00+09:00</published><updated>2019-11-14T00:00:00+09:00</updated><id>https://hebonda.github.io/2019/11/14/02</id><content type="html" xml:base="https://hebonda.github.io/2019/11/14/02.html">&lt;p&gt;메모리 주소는 1Byte 간격을 두고 있습니다.&lt;br /&gt;
메모리 주소당 데이터 용량은 1Byte 입니다.&lt;br /&gt;
주소공간 하나당 크기는 1Byte 입니다.&lt;/p&gt;</content><author><name></name></author><summary type="html">메모리 주소는 1Byte 간격을 두고 있습니다. 메모리 주소당 데이터 용량은 1Byte 입니다. 주소공간 하나당 크기는 1Byte 입니다.</summary></entry></feed>